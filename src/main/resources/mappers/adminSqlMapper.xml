<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.spring.bank.admin.dao.AdminDAO">

	<!-- 관리자 로그인 -->
	<select id="SelectUser" parameterType="String" resultType="com.spring.bank.user.vo.UserVO">
    	SELECT * FROM admin WHERE member_id = #{member_id}
    </select>
	
	<!-- 관리자페이지 회원수(전체) -->
	<select id="getCustomerCnt" resultType="int">
		SELECT COUNT(*) as cnt FROM members
	</select>
	
	<!-- 관리자페이지(회원목록) -->
	<select id="getCustomerList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.UserVO">
		<![CDATA[
		SELECT * FROM
			(SELECT member_id, member_name, member_birth, member_hp, member_email, member_indate, member_addr1, member_addr2, member_addr3, member_zipcode, rowNum rNum 
				FROM (SELECT * FROM members ORDER BY member_indate DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자페이지 회원수(검색어별) -->
	<select id="getCustomerSearchCnt" parameterType="String" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*) as cnt FROM members WHERE member_name LIKE '%'||#{search}||'%'
		]]>
	</select>
	
	<!-- 관리자페이지(회원검색) -->
	<select id="getCustomerSearchList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.UserVO">
		<![CDATA[
		SELECT * FROM
			(SELECT member_id, member_name, member_birth, member_hp, member_email, member_indate, member_addr1, member_addr2, member_addr3, member_zipcode, rowNum rNum 
				FROM (SELECT * FROM members WHERE member_name LIKE '%'||#{search}||'%' ORDER BY member_indate DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자 회원삭제 -->
	<delete id="deleteCustomer" parameterType="String">
		DELETE FROM members WHERE member_id IN ( #{member_id} )
	</delete>
	
	<!-- 관리자 페이지 예금 상품 등록 -->
	<insert id="insertDepositProduct" parameterType="com.spring.bank.product.vo.DepositProductVO">
		INSERT INTO deposit_product(deposit_product_name, deposit_product_summary, deposit_product_date, deposit_product_interRate, deposit_product_type, deposit_product_maxDate, deposit_product_minDate, deposit_product_minPrice, deposit_product_explanation, deposit_product_notice, deposit_product_bankCode)
		VALUES(#{deposit_product_name}, #{deposit_product_summary}, sysdate, #{deposit_product_interRate}, #{deposit_product_type}, #{deposit_product_maxDate}, #{deposit_product_minDate}, #{deposit_product_minPrice}, #{deposit_product_explanation}, #{deposit_product_notice}, #{deposit_product_bankCode})
	</insert>
	
	<!-- 관리자 페이지 예금 상품 수 -->
	<select id="getDepositProductCnt" resultType="int">
		SELECT COUNT(*) as cnt FROM deposit_product
	</select>
	
	<!-- 관리자 페이지 예금 상품 조회 -->
	<select id="selectDepositProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.DepositProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT deposit_product_name, deposit_product_summary, deposit_product_date, deposit_product_interrate, deposit_product_type, deposit_product_maxdate, deposit_product_mindate, deposit_product_minprice, deposit_product_bankcode, rowNum rNum 
				FROM (SELECT * FROM deposit_product ORDER BY deposit_product_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자 페이지 예금 상품 수(검색결과수)  -->
	<select id="getDepositProductSearchCnt" parameterType="String" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*) as cnt FROM deposit_product WHERE deposit_product_name LIKE '%'||#{search}||'%'
		]]>
	</select>
	
	<!-- 관리자 페이지 예금 상품 검색(입력받아서 검색) -->
	<select id="searchDepositProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.DepositProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT deposit_product_name, deposit_product_summary, deposit_product_date, deposit_product_interrate, deposit_product_type, deposit_product_maxdate, deposit_product_mindate, deposit_product_minprice, deposit_product_bankcode, rowNum rNum 
				FROM (SELECT * FROM deposit_product WHERE deposit_product_name LIKE '%'||#{search}||'%' ORDER BY deposit_product_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자 페이지 예금 상품 상세조회 -->
	<select id="getDepositProductInfo" parameterType="String" resultType="com.spring.bank.product.vo.DepositProductVO">
		SELECT * FROM deposit_product WHERE deposit_product_name=#{deposit_product_name}
	</select>
	
	<!-- 관리자 페이지 예금 상품 수정 -->
	<update id="updateDepositProduct" parameterType="com.spring.bank.product.vo.DepositProductVO">
		UPDATE deposit_product set deposit_product_summary=#{deposit_product_summary}, deposit_product_interRate=#{deposit_product_interRate}, deposit_product_type=#{deposit_product_type}, deposit_product_maxDate=#{deposit_product_maxDate}, deposit_product_minDate=#{deposit_product_minDate}, deposit_product_minPrice=#{deposit_product_minPrice}, deposit_product_explanation=#{deposit_product_explanation}, deposit_product_notice=#{deposit_product_notice}
			WHERE deposit_product_name=#{deposit_product_name}
	</update>
	
	<!-- 관리자 페이지 예금 상품 삭제 -->
	<delete id="deleteDepositProduct" parameterType="String">
		DELETE FROM deposit_product WHERE deposit_product_name IN ( #{deposit_product_name} )
	</delete>
	
	<!-- 관리자 페이지 적금 상품 등록 -->
	<insert id="insertSavingProduct" parameterType="com.spring.bank.product.vo.SavingProductVO">
		INSERT INTO saving_product(saving_product_name, saving_product_summary, saving_product_date, saving_product_interRate, saving_product_type, saving_product_maxDate, saving_product_minDate, saving_product_minPrice, saving_product_explanation, saving_product_notice, saving_product_bankCode)
		VALUES(#{saving_product_name}, #{saving_product_summary}, sysdate, #{saving_product_interRate}, #{saving_product_type}, #{saving_product_maxDate}, #{saving_product_minDate}, #{saving_product_minPrice}, #{saving_product_explanation}, #{saving_product_notice}, #{saving_product_bankCode})
	</insert>
	
	<!-- 관리자 페이지 적금 상품 수 -->
	<select id="getSavingProductCnt" resultType="int">
		SELECT COUNT(*) as cnt FROM saving_product
	</select>
	
	<!-- 관리자 페이지 적금 상품 조회 -->
	<select id="selectSavingProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.SavingProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT saving_product_name, saving_product_summary, saving_product_date, saving_product_interrate, saving_product_type, saving_product_maxdate, saving_product_mindate, saving_product_minprice, saving_product_bankcode, rowNum rNum 
				FROM (SELECT * FROM saving_product ORDER BY saving_product_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자 페이지 적금 상품 수(검색결과수)  -->
	<select id="getSavingProductSearchCnt" parameterType="String" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*) as cnt FROM saving_product WHERE saving_product_name LIKE '%'||#{search}||'%'
		]]>
	</select>
	
	<!-- 관리자 페이지 적금 상품 검색(입력받아서 검색) -->
	<select id="searchSavingProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.SavingProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT saving_product_name, saving_product_summary, saving_product_date, saving_product_interrate, saving_product_type, saving_product_maxdate, saving_product_mindate, saving_product_minprice, saving_product_bankcode, rowNum rNum 
				FROM (SELECT * FROM saving_product WHERE saving_product_name LIKE '%'||#{search}||'%' ORDER BY saving_product_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자 페이지 적금 상품 상세조회 -->
    <select id="getSavingProductInfo" parameterType="String" resultType="com.spring.bank.product.vo.SavingProductVO">
        SELECT * FROM saving_product WHERE saving_product_name=#{saving_product_name}
    </select>
   
    <!-- 관리자 페이지 적금 상품 수정 -->
    <update id="updateSavingProduct" parameterType="com.spring.bank.product.vo.SavingProductVO">
        UPDATE saving_product set saving_product_summary=#{saving_product_summary}, saving_product_interRate=#{saving_product_interRate}, saving_product_type=#{saving_product_type}, saving_product_maxDate=#{saving_product_maxDate}, saving_product_minDate=#{saving_product_minDate}, saving_product_minPrice=#{saving_product_minPrice}, saving_product_explanation=#{saving_product_explanation}, saving_product_notice=#{saving_product_notice}, saving_product_bankCode=#{saving_product_bankCode}
         WHERE saving_product_name=#{saving_product_name}
     </update>
	
	<!-- 관리자 페이지 적금 상품 삭제 -->
	<delete id="deleteSavingProduct" parameterType="String">
		DELETE FROM saving_product WHERE saving_product_name IN ( #{saving_product_name} )
	</delete>
	
	<!-- 펀드 -->
	<!-- 관리자 페이지 펀드 상품 등록 -->
	<insert id="insertFundProduct" parameterType="com.spring.bank.product.vo.FundProductVO">
		INSERT INTO fund(fund_id, fund_title, fund_content, fund_start_date, fund_end_date, fund_goal_money, fund_category, fund_approve, fund_mem_name, fund_mem_hp, fund_mem_email, fund_account, fund_filename, fund_summary, fund_bank_code)
		VALUES(fund_id.nextval, #{fund_title}, #{fund_content}, #{fund_start_date}, #{fund_end_date}, #{fund_goal_money}, #{fund_category}, 0, #{fund_mem_name}, #{fund_mem_hp}, #{fund_mem_email}, #{fund_account}, #{fund_filename}, #{fund_summary}, #{fund_bank_code})
	</insert>
	
	<!-- 관리자 페이지 펀드 상품 수 -->
	<select id="getFundProductCnt" resultType="int">
		SELECT COUNT(*) as cnt FROM fund
	</select>
	
	<!-- 관리자 페이지 펀드 상품 조회 -->
	<select id="selectFundProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.FundProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT fund_title, fund_content, fund_start_date, fund_end_date, fund_goal_money, fund_category, fund_approve, fund_mem_name, fund_mem_hp, fund_mem_email, fund_account, fund_filename, fund_summary, rowNum rNum 
				FROM (SELECT * FROM fund ORDER BY fund_start_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자 페이지 펀드 상품 수(검색결과수)  -->
	<select id="getFundProductSearchCnt" parameterType="String" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*) as cnt FROM fund WHERE fund_title LIKE '%'||#{search}||'%'
		]]>
	</select>
	
	<!-- 관리자 페이지 펀드 상품 검색(입력받아서 검색) -->
	<select id="searchFundProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.FundProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT fund_title, fund_title, fund_content, fund_start_date, fund_end_date, fund_goal_money, fund_category, fund_approve, fund_mem_name, fund_mem_hp, fund_mem_email, fund_account, fund_filename, fund_summary, rowNum rNum 
				FROM (SELECT * FROM fund WHERE fund_title LIKE '%'||#{search}||'%' ORDER BY fund_start_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	
	<!-- 관리자 페이지 펀드 상품 상세조회 -->
    <select id="getFundProductInfo" parameterType="String" resultType="com.spring.bank.product.vo.FundProductVO">
        SELECT * FROM fund WHERE fund_title=#{fund_title}
    </select>
   
    <!-- 관리자 페이지 펀드 상품 수정 -->
    <update id="updateFundProduct" parameterType="com.spring.bank.product.vo.FundProductVO">
        UPDATE fund set fund_content=#{fund_content}, fund_start_date=#{fund_start_date}, fund_end_date=#{fund_end_date}, fund_goal_money=#{fund_goal_money}, fund_category=#{fund_category}
        , fund_mem_name=#{fund_mem_name}, fund_mem_hp=#{fund_mem_hp}, fund_mem_email=#{fund_mem_email}, fund_account=#{fund_account}, fund_filename=#{fund_filename}, fund_summary=#{fund_summary}, fund_bank_code=#{fund_bank_code}
         WHERE fund_title=#{fund_title}
     </update>
	
	<!-- 관리자 페이지 펀드 상품 삭제 -->
	<delete id="deleteFundProduct" parameterType="String">
		DELETE FROM fund WHERE fund_title IN ( #{fund_title} )
	</delete>
		
	<!-- 진지현 작성 -->
	
	<!-- 관리자 페이지 연금 상품 등록 -->
	<insert id="insertIrpProduct" parameterType="com.spring.bank.product.vo.IrpProductVO">
		INSERT INTO irp_product(irp_product_name, irp_product_summary, irp_product_date, irp_product_interRate, irp_product_expiryTerm, irp_product_explanation,irp_product_money, irp_product_notice, irp_product_bankCode)
		VALUES(#{irp_product_name}, #{irp_product_summary}, sysdate, #{irp_product_interRate}, #{irp_product_expiryTerm}, #{irp_product_explanation}, #{irp_product_money},#{irp_product_notice}, #{irp_product_bankCode})
	</insert>
	
	<!-- 관리자 페이지연금 상품 수 -->
	<select id="getIrpProductCnt" resultType="int">
		SELECT COUNT(*) as cnt FROM irp_product
	</select> 
	
	<!-- 관리자 페이지 연금 상품 조회 -->
	<select id="selectIrpProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.IrpProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT irp_product_name, irp_product_summary, irp_product_date, irp_product_interRate, irp_product_expiryTerm, irp_product_explanation,irp_product_money, irp_product_notice, irp_product_bankCode, rowNum rNum 
				FROM (SELECT * FROM irp_product ORDER BY irp_product_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select> 
	
	<!-- 관리자 페이지 연금 상품 수(검색결과수)  -->
	 <select id="getIrpProductSearchCnt" parameterType="String" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*) as cnt FROM irp_product WHERE irp_product_name LIKE '%'||#{search}||'%'
		]]>
	</select>
	 
	<!-- 관리자 페이지 연금 상품 검색(입력받아서 검색) -->
	 <select id="searchIrpProduct" parameterType="java.util.Map" resultType="com.spring.bank.product.vo.IrpProductVO">
		<![CDATA[
		SELECT * FROM
			(SELECT irp_product_name, irp_product_summary, irp_product_date, irp_product_interRate, irp_product_expiryTerm, irp_product_explanation,irp_product_money, irp_product_notice, irp_product_bankCode, rowNum rNum 
				FROM (SELECT * FROM irp_product WHERE irp_product_name LIKE '%'||#{search}||'%' ORDER BY irp_product_date DESC)
			) WHERE rNum >= #{start} and rNum <= #{end}
		]]>	
	</select>
	 
	<!-- 관리자 페이지 연금 상품 상세조회 -->
	<select id="getIrpProductInfo" parameterType="String" resultType="com.spring.bank.product.vo.IrpProductVO">
		SELECT * FROM irp_product WHERE irp_product_name=#{irp_product_name}
	</select>
	
	<!-- 관리자 페이지 연금 상품 수정 -->
	 <update id="updateIrpProduct" parameterType="com.spring.bank.product.vo.IrpProductVO">
		UPDATE irp_product SET irp_product_summary=#{irp_product_summary}, irp_product_interRate=#{irp_product_interRate}, irp_product_expiryTerm=#{irp_product_expiryTerm}, irp_product_explanation=#{irp_product_explanation},irp_product_money=#{irp_product_money}, irp_product_notice=#{irp_product_notice}, irp_product_bankCode=#{irp_product_bankCode}
			WHERE irp_product_name=#{irp_product_name}
	</update> 
	
	<!-- 관리자 페이지 연금 상품 삭제 -->
 	<delete id="deleteIrpProduct" parameterType="String">
		DELETE FROM irp_product WHERE irp_product_name IN ( #{irp_product_name} )
	</delete> 
	
	<!-- 문의사항 갯수 -->
	<select id="getInquiryCnt" resultType="int" >
		SELECT COUNT(*) as cnt FROM inquiry
	</select>

	<!-- 문의사항 리스트 조회 -->
	<select id="getInquiryList" resultType="com.spring.bank.user.vo.InquiryVO" parameterType="java.util.Map" >
		<![CDATA[
			SELECT * 
				FROM (SELECT inquiry_id, inquiry_title, inquiry_content, member_id, inquiry_ref, inquiry_regDate
						, rowNUM rNum 
						 FROM (SELECT * FROM inquiry ORDER BY inquiry_ref DESC))
				WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>

	<!-- 자주묻는 질문 갯수 -->
	<select id="getFaqCnt" resultType="int" >
		SELECT COUNT(*) as cnt FROM faq
	</select>
	
	<!-- 자주묻는 질문조회-->
	<select id="getFaqList" resultType="com.spring.bank.user.vo.faqVO" parameterType="java.util.Map" >
		<![CDATA[
			SELECT * 
				FROM (SELECT faq_id, faq_title, faq_content, faq_regDate,rowNUM rNum 
						 FROM (SELECT * FROM faq ORDER BY faq_id))
				WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 자주묻는 질문 추가 -->
	<insert id ="faqAdd" parameterType="com.spring.bank.user.vo.faqVO" >
		INSERT INTO faq(faq_id, faq_title, faq_content, faq_regDate)
		VALUES(faq_seq.nextval, #{faq_title}, #{faq_content}, sysdate)
	</insert>
	
	<!-- faq 수정 상세 조회 -->
	<select id="getFaqDetail" parameterType="int" resultType="com.spring.bank.user.vo.faqVO">
		SELECT * FROM faq 
		WHERE faq_id=#{faq_id} 
	</select>
	
	<!-- faq 수정 처리 -->
	<update  id="updateFaq" parameterType="com.spring.bank.user.vo.faqVO">
		UPDATE faq SET faq_id=#{faq_id}, faq_title=#{faq_title}, faq_content=#{faq_content} 
		WHERE faq_id=#{faq_id}
	</update>
	
	<!-- faq 삭제 -->
	<delete id ="deleteFaq" parameterType="int">
		DELETE FROM faq 
		WHERE faq_id=#{faq_id} 
	</delete>
	
	<!-- 관리자 회원계좌수 -->
	<select id="getCustomerAccountCnt" resultType="int">
		SELECT COUNT(*) cnt FROM members m, account a WHERE m.member_id = a.member_id
	</select>
	
	<!-- 관리자 회원계좌목록 -->
	<select id="getCustomerAccountList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.CustomerAccountVO">
		<![CDATA[
		SELECT * FROM (      
			SELECT member_name, member_birth, account_bankCode, account_id, account_type, account_state, account_stateContent, rowNum as rNum
	  		FROM ( select * from members m, account a WHERE m.member_id = a.member_id ORDER BY account_newdate DESC)
      				 ) where rNum>=#{start} and rNum<=#{end}
      	]]>		 
	</select>
	
	<!-- 관리자 회원계좌 검색결과 수 -->
	<select id="getSerachCustomerAccountCnt" parameterType="String" resultType="int">
		<![CDATA[
		SELECT COUNT(*) cnt FROM members m, account a WHERE m.member_id = a.member_id and m.member_name LIKE '%'||#{search}||'%' or a.account_id LIKE '%'||#{search}||'%'
		]]>
	</select>
	
	<!-- 관리자 회원계좌 검색결과목록 -->
	<select id="getSearchCustomerAccountList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.CustomerAccountVO">
		<![CDATA[
		SELECT * FROM (      
			SELECT member_name, member_birth, account_bankCode, account_id, account_type, account_state, account_stateContent, rowNum as rNum
	  		FROM ( select * from members m, account a WHERE m.member_id = a.member_id and m.member_name LIKE '%'||#{search}||'%' or a.account_id LIKE '%'||#{search}||'%' ORDER BY account_newdate DESC)
      				 ) where rNum>=#{start} and rNum<=#{end}
      	]]>	
	</select>
	
	<!-- 관리자 TEST 계좌 생성(복환) -->
    <insert id="insertTestAccount" parameterType="com.spring.bank.user.vo.AccountVO">
    	INSERT INTO account(account_bankCode, account_id, account_password, account_balance, account_type, account_state, account_stateContent, account_limit, account_newDate, unique_key, account_default, account_linked)
		VALUES(#{account_bankCode}, #{account_id}, #{account_password}, #{account_balance}, #{account_type}, #{account_state}, #{account_stateContent}, #{account_limit}, sysdate, #{unique_key}, 0, 0)
    </insert>

	<!-- 지은 -->
	<!-- 대출 상품 개수 -->
	<select id="getLoanProductCnt" resultType="int">
		SELECT COUNT(*) FROM loan_product
	</select>
	
	<!-- 대출 내역 개수 -->
	<select id="getLoanCnt" resultType="int">
		SELECT COUNT(*) FROM loan
	</select>
	
	<!-- 대출 신청 개수 -->
	<select id="getLoanRequestCnt" resultType="int">
		SELECT COUNT(*) FROM loan WHERE loan_state = 1
	</select>
	
	<!-- 대출 해지 개수 -->
	<select id="getLoanCancelCnt" resultType="int">
		SELECT COUNT(*) FROM loan WHERE loan_state = 4
	</select>
	
	<select id="getSearchLoanProductCnt" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM loan_product WHERE loan_product_name LIKE '%'||#{keyword}||'%'
	</select>
	
	<!-- 대출 상품 목록 -->
	<select id="getLoanProductList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.LoanProductVO">
   		<![CDATA[
	    	SELECT * 
			  FROM (SELECT loan_product_name
			  			   , loan_product_rate
			  			   , loan_product_summary
			  			   , loan_product_minPrice
			  			   , loan_product_maxPrice
			  			   , loan_product_minDate
			  			   , loan_product_maxDate
			  			   , loan_product_bankCode
			  			   , loan_product_baseDate
			  			   , loan_product_prepaymentRate
			  		       , rowNum rNum  
					  FROM (SELECT * 
					          FROM loan_product
					         ORDER BY loan_product_name ASC
					       ) 
				   )
			 WHERE rNum >= #{start} 
			   AND rNum <= #{end}
		]]>
    </select>
    
	<!-- 대출 상품  -->
	<select id="getLoanProductInfo" parameterType="String" resultType="com.spring.bank.user.vo.LoanProductVO">
    	SELECT * 
		  FROM loan_product
		 WHERE loan_product_name = #{loan_product_name} 
    </select>
    
	<!-- 대출 상품 목록 search -->
	<select id="searchLoanProductList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.LoanProductVO">
   		<![CDATA[
	    	SELECT * 
			  FROM (SELECT loan_product_name
			  			   , loan_product_rate
			  			   , loan_product_summary
			  			   , loan_product_minPrice
			  			   , loan_product_maxPrice
			  			   , loan_product_minDate
			  			   , loan_product_maxDate
			  			   , loan_product_bankCode
			  			   , loan_product_baseDate
			  			   , loan_product_prepaymentRate
			  		       , rowNum rNum  
					  FROM (SELECT * 
					          FROM loan_product
					         WHERE loan_product_name LIKE '%'||#{keyword}||'%'
					            OR loan_product_summary LIKE '%'||#{keyword}||'%'
					         ORDER BY loan_product_name ASC
					       ) 
				   )
			 WHERE rNum >= #{start} 
			   AND rNum <= #{end}
		]]>
    </select>
    
    <insert id="loanProductInsert" parameterType="com.spring.bank.user.vo.LoanProductVO">
    	INSERT INTO loan_product(loan_product_name
    							 , loan_product_rate
    							 , loan_product_minPrice
    							 , loan_product_maxPrice
    							 , loan_product_minDate
    							 , loan_product_maxDate
    							 , loan_product_bankCode
    							 , loan_product_baseDate
    							 , loan_product_prepaymentRate
    							 , loan_product_summary
    							)
    	VALUES(#{loan_product_name}
    	       , #{loan_product_rate}
    	       , #{loan_product_minPrice}
    	       , #{loan_product_maxPrice}
    	       , #{loan_product_minDate}
    	       , #{loan_product_maxDate}
    	       , #{loan_product_bankCode}
    	       , sysdate
    	       , #{loan_product_prepaymentRate}
    	       , #{loan_product_summary}
    	      )
    </insert>
    
    <update id="loanProductUpdate" parameterType="com.spring.bank.user.vo.LoanProductVO">
    	UPDATE loan_product 
    	   SET loan_product_name = #{loan_product_name}
    	       , loan_product_rate = #{loan_product_rate}
    	       , loan_product_minPrice = #{loan_product_minPrice}
    	       , loan_product_maxPrice = #{loan_product_maxPrice}
    	       , loan_product_minDate = #{loan_product_minDate}
    	       , loan_product_maxDate = #{loan_product_maxDate}
    	       , loan_product_bankCode = #{loan_product_bankCode}
    	       , loan_product_prepaymentRate = #{loan_product_prepaymentRate}
    	       , loan_product_summary = #{loan_product_summary}
    	 WHERE loan_product_name = #{pre_loan_product_name}
    </update>
    
    <delete id="loanProductDelete" parameterType="String">
    	DELETE loan_product
    	 WHERE loan_product_name = #{loan_product_name}
    </delete>
    
    <!-- 대출 목록 -->
	<select id="getLoanList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.LoanVO">
   		<![CDATA[
	    	SELECT * 
			  FROM (SELECT loan_id
			  			   , loan_product_name
			  			   , member_id
			  			   , account_id
			  			   , loan_state
			  			   , loan_startDate
			  			   , loan_endDate
			  			   , loan_month
			  			   , loan_monthlyRepayment
			  			   , loan_repaymentType
			  			   , loan_rate
			  			   , loan_amount
			  			   , loan_balance
			  			   , loan_interest
			  			   , loan_tranAmount
			  			   , loan_tranInterest
			  			   , loan_delinquency
			  			   , loan_prepaymentRate
			  		       , rowNum rNum  
					  FROM (SELECT * 
					          FROM loan
					         ORDER BY loan_id DESC
					       ) 
				   )
			 WHERE rNum >= #{start} 
			   AND rNum <= #{end}
		]]>
    </select>
    
    <!-- 대출 신청 목록 -->
	<select id="getLoanRequestList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.LoanVO">
   		<![CDATA[
	    	SELECT * 
			  FROM (SELECT loan_id
			  			   , loan_product_name
			  			   , member_id
			  			   , account_id
			  			   , loan_state
			  			   , loan_startDate
			  			   , loan_endDate
			  			   , loan_month
			  			   , loan_monthlyRepayment
			  			   , loan_repaymentType
			  			   , loan_rate
			  			   , loan_amount
			  			   , loan_balance
			  			   , loan_interest
			  			   , loan_tranAmount
			  			   , loan_tranInterest
			  			   , loan_delinquency
			  			   , loan_prepaymentRate
			  		       , rowNum rNum  
					  FROM (SELECT * 
					          FROM loan
					         WHERE loan_state = 1
					         ORDER BY loan_id DESC
					       ) 
				   )
			 WHERE rNum >= #{start} 
			   AND rNum <= #{end}
		]]>
    </select>
    
    
    <!-- 대출 신청 목록 -->
	<select id="getLoanCancelList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.LoanVO">
   		<![CDATA[
	    	SELECT * 
			  FROM (SELECT loan_id
			  			   , loan_product_name
			  			   , member_id
			  			   , account_id
			  			   , loan_state
			  			   , loan_startDate
			  			   , loan_endDate
			  			   , loan_month
			  			   , loan_monthlyRepayment
			  			   , loan_repaymentType
			  			   , loan_rate
			  			   , loan_amount
			  			   , loan_balance
			  			   , loan_interest
			  			   , loan_tranAmount
			  			   , loan_tranInterest
			  			   , loan_delinquency
			  			   , loan_prepaymentRate
			  		       , rowNum rNum  
					  FROM (SELECT * 
					          FROM loan
					         WHERE loan_state = 4
					         ORDER BY loan_id DESC
					       ) 
				   )
			 WHERE rNum >= #{start} 
			   AND rNum <= #{end}
		]]>
    </select>
    
    <update id="loanRequestAction" parameterType="java.util.Map">
    	UPDATE loan
    	   SET loan_state = #{state}
    	 WHERE loan_id = #{loan_id}
    </update>
    
	<select id="getSearchLoanCnt" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM loan_product 
		 WHERE loan_product_name LIKE '%'||#{keyword}||'%'
		   
	</select>
	
	<select id="getSearchLoanRequestCnt" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM loan_product WHERE loan_state = 1
		   AND loan_product_name LIKE '%'||#{keyword}||'%'
		   
	</select>
	
    <!-- 대출 목록 -->
	<select id="searchLoanList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.LoanVO">
   		<![CDATA[
	    	SELECT * 
			  FROM (SELECT loan_id
			  			   , loan_product_name
			  			   , member_id
			  			   , account_id
			  			   , loan_state
			  			   , loan_startDate
			  			   , loan_endDate
			  			   , loan_month
			  			   , loan_monthlyRepayment
			  			   , loan_repaymentType
			  			   , loan_rate
			  			   , loan_amount
			  			   , loan_balance
			  			   , loan_interest
			  			   , loan_tranAmount
			  			   , loan_tranInterest
			  			   , loan_delinquency
			  			   , loan_prepaymentRate
			  		       , rowNum rNum  
					  FROM (SELECT * 
					          FROM loan
					         WHERE loan_product_name LIKE '%'||#{keyword}||'%'
					         ORDER BY loan_id DESC
					       ) 
				   )
			 WHERE rNum >= #{start} 
			   AND rNum <= #{end}
		]]>
    </select>
    
    <!-- 대출 신청 목록 -->
	<select id="searchLoanRequestList" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.LoanVO">
   		<![CDATA[
	    	SELECT * 
			  FROM (SELECT loan_id
			  			   , loan_product_name
			  			   , member_id
			  			   , account_id
			  			   , loan_state
			  			   , loan_startDate
			  			   , loan_endDate
			  			   , loan_month
			  			   , loan_monthlyRepayment
			  			   , loan_repaymentType
			  			   , loan_rate
			  			   , loan_amount
			  			   , loan_balance
			  			   , loan_interest
			  			   , loan_tranAmount
			  			   , loan_tranInterest
			  			   , loan_delinquency
			  			   , loan_prepaymentRate
			  		       , rowNum rNum  
					  FROM (SELECT * 
					          FROM loan
					         WHERE loan_state = 1
							   AND loan_product_name LIKE '%'||#{keyword}||'%'
					         ORDER BY loan_id DESC
					       ) 
				   )
			 WHERE rNum >= #{start} 
			   AND rNum <= #{end}
		]]>
    </select>
	<!-- 지은 -->
	
	<!-- 공지사항 쓰기 처리(민재) -->
	<insert id="mngNoticeWriteAction" parameterType="com.spring.bank.user.vo.NoticeVO">
		INSERT INTO NOTICE
		VALUES (notice_num_seq.nextval, #{notice_writer}, #{notice_subject}, #{notice_password}, #{notice_content}, 0, sysdate)
	</insert>
	
	<!-- 공지사항 - 비밀번호 인증(민재) -->
	<select id="noticePWDCheck" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*) FROM NOTICE WHERE notice_num = #{notice_num} AND notice_password = #{notice_password}
	</select>
	
	<!-- 공지사항 상세페이지(민재) -->
	<select id="getNoticeDetail" parameterType="int" resultType="com.spring.bank.user.vo.NoticeVO">
		SELECT * FROM NOTICE WHERE notice_num = #{notice_num}
	</select>
	
	<!-- 공지사항 수정처리(민재) -->
	<update id="noticeModifyAction" parameterType="com.spring.bank.user.vo.NoticeVO">
		UPDATE NOTICE SET notice_subject = #{notice_subject}, notice_password = #{notice_password}, notice_content = #{notice_content}
		 WHERE notice_num = #{notice_num}
	</update>
	
	<!-- 공지사항 삭제처리(민재) -->
	<delete id="noticeDeleteAction" parameterType="int">
		DELETE FROM NOTICE WHERE notice_num = #{notice_num}
	</delete>
	
</mapper>