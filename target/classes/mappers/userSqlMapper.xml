<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.spring.bank.user.dao.CustomerDAO">
    
    <!-- 회원가입 아이디 중복확인 -->
    <select id="idCheck" parameterType="java.util.Map" resultType="int">
    	SELECT COUNT(*) as cnt FROM members WHERE member_id = #{member_id}
    </select>
    
    <!-- 회원가입 처리 -->
    <insert id="insertUser" parameterType="com.spring.bank.user.vo.UserVO">
    	INSERT INTO members(member_id, member_password, member_name, member_birth, member_hp, member_email, member_zipcode, member_addr1,  member_addr2, member_addr3, member_indate, member_enabled, member_authority, access_token, refresh_token, user_seq_no)
    	 VALUES(#{member_id}, #{member_password}, #{member_name}, #{member_birth}, #{member_hp}, #{member_email}, #{member_zipcode}, #{member_addr1}, #{member_addr2}, #{member_addr3}, sysdate, 1, 'ROLE_USER', #{access_token}, #{refresh_token}, #{user_seq_no})
    </insert>
    
    <!-- 이메일 인증 성공 처리 -->
    <update id="emailSuccess" parameterType="com.spring.bank.user.vo.UserVO">
    	UPDATE members SET member_enabled = #{member_enabled} WHERE member_email = #{member_email}
    </update>
    
    <!-- 이메일 체크 -->
    <select id="emailChk" parameterType="String" resultType="int">
    	SELECT member_enabled FROM members WHERE member_id = #{member_id}
    </select>
    
    <!-- 로그인 및 회원인증 -->
    <select id="SelectUser" parameterType="String" resultType="com.spring.bank.user.vo.UserVO">
    	SELECT * FROM members WHERE member_id = #{member_id}
    </select>
    
    <select id="idPasswordChk" parameterType="java.util.Map" resultType="int">
    	SELECT COUNT(*) FROM members WHERE member_id = #{member_id} AND member_password = #{member_password}
    </select>
    
    <!-- 회원탈퇴 -->
    <delete id="deleteUser" parameterType="String">
    	DELETE FROM members WHERE member_id = #{member_id}
    </delete>
    
    <!-- 회원정보 상세 페이지 -->
    <select id="getUserInfo" parameterType="String" resultType="com.spring.bank.user.vo.UserVO">
    	SELECT * FROM members WHERE member_id = #{member_id}
    </select>
    
    <!-- 회원정보 수정 처리 -->
    <update id="updateUser" parameterType="com.spring.bank.user.vo.UserVO">
    	UPDATE members SET member_password = #{member_password}, member_hp = #{member_hp}, member_email = #{member_email}, member_zipcode = #{member_zipcode}, member_addr1 = #{member_addr1}, member_addr2 = #{member_addr2}, member_addr3 = #{member_addr3} WHERE member_id = #{member_id}
    </update>
    
    <!-- id찾기 -->
	<select id="idFind" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.UserVO">
		SELECT * FROM members WHERE member_name=#{member_name} AND member_email=#{member_email}
	</select>
	
	<!-- 비밀번호 재설정 전에 멤버 정보 가져오기 -->
	<select id="customerFind" parameterType="java.util.Map" resultType="com.spring.bank.user.vo.UserVO">
		SELECT * FROM members WHERE member_name=#{member_name} AND member_email=#{member_email} AND member_id=#{member_id}
	</select>
	
	<!-- 비밀번호 재설정 -->
	<update id="updatePassword" parameterType="com.spring.bank.user.vo.UserVO">
		UPDATE members set member_password=#{member_password} WHERE member_id=#{member_id}
	</update>

	<!-- 환율 저장 후 출력(지호) -->
    <insert id="exchangeIn" parameterType="com.spring.bank.user.vo.CrawlerVO">
    	INSERT INTO exchange_rate(exchange_country, exchange_rate)
    	VALUES (#{exchange_country}, #{exchange_rate}) 
    </insert>
    
    <!-- 환율 체크(지호) -->
    <select id="exchangeChk" parameterType="String" resultType="int">
    	SELECT COUNT(*) FROM exchange_rate
    	 WHERE exchange_country=#{exchange_country}
    </select>
    
    <!-- 환율 최신화(지호) -->
    <update id="exchangeUpd" parameterType="com.spring.bank.user.vo.CrawlerVO">
    	UPDATE exchange_rate
    	   SET exchange_rate=#{exchange_rate}
    	 WHERE exchange_country=#{exchange_country}
    </update>
    
    <!-- db에 있는 환율  출력 -->
    <select id="exchangeVary" parameterType="String" resultType="String">
    	SELECT exchange_rate 
    	  FROM exchange_rate
    	 WHERE exchange_country=#{exchange_country}
    </select>	
</mapper>