<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- @Secured 어노테이션 설정 -->
    <!-- <security:global-method-security secured-annotations="enabled" proxy-target-class="true" /> -->
	
	<security:authentication-manager alias="authenticationManager" />
	
	<!-- 관리자 -->
	<security:authentication-manager id="adminAuthManager">
		<security:authentication-provider user-service-ref ="adminService"/>
	</security:authentication-manager>
		
	<!-- 일반회원 -->
	<security:authentication-manager id="uesrAuthManager">
		<security:authentication-provider user-service-ref ="userService"/>
	</security:authentication-manager>
	
	<!-- 정적 리소스 파일들에는 보안 설정을 하지 않음. -->
	<security:http pattern="/include/**" security="none" />
	
	<security:http pattern="/customer/**" auto-config="true" use-expressions="true" create-session="never"
		authentication-manager-ref="uesrAuthManager" >
		
		<!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능)  -->
		<security:intercept-url pattern="/customer/**.do" access="permitAll" />
		
		<!-- 로그인한 사용자 영역 -->
		<security:intercept-url pattern="/customer/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')"/>
		
		<!-- 로그인폼 -->
		<security:form-login login-page="/customer/login.do" 
				login-processing-url="/customer/loginAction.do"
				authentication-success-handler-ref="userLoginSuccessHandler"
				authentication-failure-handler-ref="userLoginFailureHandler"
				username-parameter="id" password-parameter="password" />
				
		
		<!-- 로그아웃 폼 -->
		<security:logout logout-url="/customer/logout"
				logout-success-url="/customer/logoutAction.do"
		 		invalidate-session="true"
		 		delete-cookies="JSESSIONID"
		 		/>
		
		<!-- iframe -->
		<security:headers>
	        <security:frame-options policy="SAMEORIGIN"/>
	   </security:headers>
		
		<security:session-management>
			<!-- 
				max-sessions="1" ==> 같은 브라우저의 여러창에서 동시 접속 막기
				expired-url="/user/login.do" ==> 세션 만료시 이동할 주소
				error-if-maximum-exceeded="true" ==> 최대 세션 초과시 에러 옵션
			
			 -->
		
			<security:concurrency-control max-sessions="1"
				expired-url="/customer/login.do"
				error-if-maximum-exceeded="true" />
		</security:session-management>
		
		<!-- 접근 권한이 없는 경우의 코드 -->
		<security:access-denied-handler ref="userDeniedHandler" />
		
		<security:csrf token-repository-ref="tokenRepository"/>
		
	</security:http>
	
	
	<security:http pattern="/manager/**" auto-config="true" use-expressions="true" create-session="never"
		authentication-manager-ref="adminAuthManager" >
		
		<!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능) -->
		<security:intercept-url pattern="/manager/**.do" access="permitAll" />
		
		<!-- 관리자 영역 설정 -->
		<security:intercept-url pattern="/manager/**" access="hasRole('ROLE_ADMIN')" />
		
		<!-- 로그인한 사용자 영역 -->
		<security:intercept-url pattern="/customer/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')"/>
		
		<!-- 관리자로그인폼 -->
		<security:form-login login-page="/manager/mngLogin.do" 
				login-processing-url="/manager/mngLoginAction.do"
				authentication-success-handler-ref="adminLoginSuccessHandler"
				authentication-failure-handler-ref="adminLoginFailureHandler"
				username-parameter="id" password-parameter="password" />
		
		<!-- 로그아웃 폼 -->
		<security:logout logout-url="/manager/logout"
				logout-success-url="/manager/logoutAction.do"
		 		invalidate-session="true"
		 		delete-cookies="JSESSIONID"
		 		/>
		
		<!-- iframe -->
		<security:headers>
	        <security:frame-options policy="SAMEORIGIN"/>
	   </security:headers>
		
		<security:session-management>
			<security:concurrency-control max-sessions="1"
				expired-url="/manager/mngLogin.do"
				error-if-maximum-exceeded="true" />
		</security:session-management>
		
		<!-- 접근 권한이 없는 경우의 코드 -->
		<security:access-denied-handler ref="userDeniedHandler" />
		
		<security:csrf token-repository-ref="tokenRepository"/>
		
	</security:http>
	
	<bean id="tokenRepository"
		 class="org.springframework.security.web.csrf.CookieCsrfTokenRepository"
	 	p:cookieHttpOnly="false" />
	 	
	
	
	<bean id="userDeniedHandler" class="com.spring.bank.customer.encrypt.UserDeniedHandler" />
	
	<!-- 로그인 인증을 처리하는 빈 -->
	<!-- 주의 : 에러 => sqlSession을  UserAuthenticationService 클래스의 매개변수 생성자에 주입하면 에러가 사라짐-->
	<bean id="userService" class="com.spring.bank.customer.encrypt.UserAuthenticationService" >
		<constructor-arg name="sqlSession" ref="sqlSession" />
		
	</bean>
	
	<bean id="adminService" class="com.spring.bank.admin.encrypt.AdminAuthenticationService" >
		<constructor-arg name="sqlSession" ref="sqlSession" />
		
	</bean>
	
	<bean id="userLoginSuccessHandler" class="com.spring.bank.customer.encrypt.UserLoginSuccessHandler" />
	<bean id="userLoginFailureHandler" class="com.spring.bank.customer.encrypt.UserLoginFailureHandler" />
	
	<bean id="adminLoginSuccessHandler" class="com.spring.bank.admin.encrypt.AdminLoginSuccessHandler" />
	<bean id="adminLoginFailureHandler" class="com.spring.bank.admin.encrypt.AdminLoginFailureHandler" />
		
	
	<!-- 비밀번호 암호화 빈 -->
	<!-- BCryptPasswordEncoder : 스프링에서 제공하는 클래스 -->
	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans>
